# level06

## Testing the binary

```sh
$ ./level06 
***********************************
*		level06		  *
***********************************
-> Enter Login: asdasd
***********************************
***** NEW ACCOUNT DETECTED ********
***********************************
-> Enter Serial: ^[[Aasd
$ ./level06 
***********************************
*		level06		  *
***********************************
-> Enter Login: asdasd
***********************************
***** NEW ACCOUNT DETECTED ********
***********************************
-> Enter Serial: ^[[Aasd
$ ./level06 AAAAAAAAAAAAAAAAAAAAAAAA
***********************************
*		level06		  *
***********************************
-> Enter Login: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
***********************************
***** NEW ACCOUNT DETECTED ********
***********************************
-> Enter Serial: $
```

Nothing interesting here, except that there's no buffer overflow.

The [source code](./source) is available here, and we can see a call to `ptrace` to check if the binary is being debugged.

We have to write a keygen for this binary :

```c
int valid_serial = ((username[3] ^ 0x1337) + 0x5eeded);
```

This line takes the fourth character of the username, XOR it with `0x1337`, then add `0x5eeded` to it, and we have to find a serial that matches this value.

```c
while (i < username_length)
{
    if (username[i] <= 0x1f)
    {
        ret = 1;
        break;
    }
    valid_serial += username[i] ^ valid_serial % 0x539;
    i++;
}
```

And each character of the username is XORed with `valid_serial % 0x539`, and added to `valid_serial`.

So a cool trick we can do is remove the anti-debugging, and compile the binary on our machine and run it with `printf`.

See the [cracked source](./Ressources/cracked.c) for more details.

```sh
$ ./a.out
********************************…
*               level06           *
********************************…
-> Enter Login: asdasd
********************************…
***** NEW ACCOUNT DETECTED *****…
********************************…
-> Enter Serial: 1
valid_serial=6232800
serial=1
```

We can see that `valid_serial` for the username `asdasd` is `6232800`.

```sh
$ ./level06
***********************************
*		level06		  *
***********************************
-> Enter Login: asdasd
***********************************
***** NEW ACCOUNT DETECTED ********
***********************************
-> Enter Serial: 6232800
Authenticated!
$ id
uid=1006(level06) gid=1006(level06) euid=1007(level07) egid=100(users) groups=1007(level07),100(users),1006(level06)
$ cat /home/users/level07/.pass
GbcPDRgsFK77LNnnuh7QyFYA2942Gp8yKj9KrWD8
```
